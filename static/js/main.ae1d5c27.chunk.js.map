{"version":3,"sources":["components/LinkButton.js","views/Recipe.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","button","margin","spacing","input","display","LinkButton","props","classes","className","Tooltip","title","Button","href","website","color","card","maxWidth","minHeight","maxHeight","marginBottom","marginTop","objectFit","paddingBottom","root","flexGrow","flexWrap","justifyContent","media","height","paddingTop","control","padding","Recipe","api_request","recipes","useState","setRecipes","getRecipes","a","fetch","response","json","data","hits","console","log","useEffect","Grid","container","map","recipe","key","image","Card","CardHeader","label","length","substring","subheader","source","CardMedia","CardContent","Typography","variant","component","ingredientLines","url","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","pointerEvents","alignItems","inputRoot","inputInput","transition","transitions","create","createMuiTheme","primary","main","contrastText","secondary","Navbar","MuiThemeProvider","AppBar","Toolbar","noWrap","onSubmit","submit","InputBase","onChange","placeholder","inputProps","App","setSearch","query","setQuery","e","target","value","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae1d5c27.chunk.js","sourcesContent":["// React imports\nimport React from \"react\";\nimport \"../App.css\";\n// import { Link } from \"react-router-dom\";\n\n// Material Imports\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    display: \"none\"\n  }\n}));\n\nconst LinkButton = props => {\n  //   console.log(props);\n  const classes = useStyles();\n  return (\n    <div className=\"button\">\n      <Tooltip title=\"Visit Page\">\n        {/* <Link to={{ pathname: `${props.website}` }}> */}\n        <Button\n          href={`${props.website}`}\n          className={classes.button}\n          color=\"secondary\"\n        >\n          Visit Website\n        </Button>\n        {/* </Link> */}\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default LinkButton;\n","// React Imports\nimport React, { useEffect, useState } from \"react\";\nimport LinkButton from \"../components/LinkButton\";\n\n// Material Imports\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: 345,\n    minHeight: 600,\n    maxHeight: 600,\n    margin: \"auto\",\n    marginBottom: 10,\n    marginTop: 25,\n    objectFit: \"cover\",\n    paddingBottom: 0\n  },\n  root: {\n    flexGrow: 1,\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\"\n  },\n  media: {\n    height: 0,\n    objectFit: \"cover\",\n    paddingTop: \"56.25%\" // 16:9\n  },\n  control: {\n    padding: theme.spacing(2)\n  }\n}));\n\nconst Recipe = props => {\n  const classes = useStyles();\n\n  const heroku = \"https://cors-anywhere.herokuapp.com/\";\n\n  // Food To Fork API\n  // const API_KEY_Yahoo = \"5858061f7438302c37be8a785d3b073d\";\n  // const API_KEY_Gmail = \"bfbb9c534a0c6192824cc0925fb9373f\";\n  // const count = \"&count=10\";\n  // const api_request = `https://www.food2fork.com/api/search?key=${API_KEY_Gmail}&q=${props.recipes}${count}`;\n\n  // Edaman Api\n  const API_KEY = \"eb1249267087501a5f284a364c06d72a\";\n  const APP_ID = \"e3483cc8\";\n  const api_request = `${heroku}https://api.edamam.com/search?q=${props.recipes}&app_id=${APP_ID}&app_key=${API_KEY}`;\n\n  const [recipes, setRecipes] = useState([]);\n\n  //FoodToFork\n  // const getRecipes = async () => {\n  //   const response = await fetch(api_request);\n  //   const data = await response.json();\n  //   setRecipes(data.recipes);\n  //   console.log(data.hits[0]);\n  // };\n\n  //Edaman\n  const getRecipes = async () => {\n    const response = await fetch(api_request);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits[0]);\n  };\n\n  useEffect(() => {\n    getRecipes();\n  }, [props.recipes]);\n\n  return (\n    // <div className={classes.card}>\n    <Grid container className={classes.root}>\n      {recipes.map(recipe => (\n        <Grid key={recipe.recipe.image}>\n          <Card className={classes.card}>\n            <CardHeader\n              title={\n                recipe.recipe.label.length <= 20\n                  ? `${recipe.recipe.label}`\n                  : `${recipe.recipe.label.substring(0, 24)}...`\n              }\n              subheader={recipe.recipe.source}\n            />\n            <CardMedia\n              className={classes.media}\n              image={recipe.recipe.image}\n              title={recipe.recipe.label}\n            />\n\n            <CardContent>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {recipe.recipe.ingredientLines.length >= 12\n                  ? `${recipe.recipe.ingredientLines}`\n                  : `${recipe.recipe.ingredientLines}`}\n              </Typography>\n            </CardContent>\n            <LinkButton website={recipe.recipe.url} />\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n    // </div>\n  );\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n// import IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { fade, makeStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n// import MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  //   menuButton: {\n  //     marginRight: theme.spacing(2)\n  //   },\n  title: {\n    flexGrow: 1,\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\"\n    }\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\"\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: 120,\n      \"&:focus\": {\n        width: 200\n      }\n    }\n  }\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#ff5722\",\n      contrastText: \"#fff\"\n    },\n    secondary: {\n      main: \"#ffea00\",\n      contrastText: \"#fff\"\n    }\n  }\n});\n\nconst Navbar = props => {\n  const classes = useStyles();\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            {/* <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton> */}\n            <Typography className={classes.title} variant=\"h6\" noWrap>\n              Casneil's and Diana's Recipe Viewer\n            </Typography>\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon />\n              </div>\n              <form onSubmit={props.submit}>\n                <InputBase\n                  onChange={props.search}\n                  placeholder=\"Search Recipe…\"\n                  classes={{\n                    root: classes.inputRoot,\n                    input: classes.inputInput\n                  }}\n                  inputProps={{ \"aria-label\": \"search\" }}\n                />\n              </form>\n            </div>\n          </Toolbar>\n        </AppBar>\n      </div>\n    </MuiThemeProvider>\n  );\n};\n\nexport default Navbar;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./views/Recipe\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"Chicken\");\n\n  const getSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar search={getSearch} submit={onSubmit} />\n      <Recipe recipes={query} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// import Router from \"./components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}